#include <iostream>
#include <queue>
using namespace std;

// 큐 - 개념 소개
// 사전적 의미
// - 줄, 대기 행렬
// - 줄을 서서 기다리다
// 특징
// - FIFO (First In First Out)
// 주요 함수
// - push
// - pop
// - front/rear
// - size
// - empty

// 큐 - 사례
// 실생활 예시
// - 종이컵 디스펜서
// - 은행창구 번호표 대기
// - 운영체제의 태스크 스케줄링
// 주로 언제 사용?
// - 입력된 순서대로 데이터를 처리하는 경우

// 큐 - 응용
// 너비 우선 탐색 (BFS) 알고리즘
// - 앞으로 방문할 노드를 순서대로 큐에 넣음

// 큐 - 원형 큐
// 선형 큐의 한계
// - 데이터가 없을 때에도 비어있는 공간 활용 불가능
// 원형 큐
// - 메모리 절약



// 스택 vs 큐 - 공통점
// 장점
// - 데이터 삽입 & 삭제 빠름 (push, pop)
// - 특정 위치 원소 접근 빠름 (top, front, rear)
// - O(1)
// 단점
// - 특정 위치 원소만 접근 가능, 이외에는 random acess 불가능



int main() {
	// N장의 카드가 있다. 
	int n;
	queue<int> q;

	// 첫째 줄에 정수 N(1 ≤ N ≤ 500,000)이 주어진다.
	cin >> n;

	// 각각의 카드는 차례로 1부터 N까지의 번호가 붙어 있으며,
	// 1번 카드가 제일 위에, N번 카드가 제일 아래인 상태로 순서대로 카드가 놓여 있다.
	for (int i = 1; i <= n; i++) {
		q.push(i);
	}

	// 이제 다음과 같은 동작을 카드가 한 장 남을 때까지 반복하게 된다.
	while (q.size() != 1) {
		// 우선, 제일 위에 있는 카드를 바닥에 버린다.
		q.pop();
		// 그 다음, 제일 위에 있는 카드를 제일 아래에 있는 카드 밑으로 옮긴다.
		q.push(q.front());
		q.pop();
	}

	// 첫째 줄에 남게 되는 카드의 번호를 출력한다.
	cout << q.front();

	return 0;
}
