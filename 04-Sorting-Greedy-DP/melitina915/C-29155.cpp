#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
	// (5 <= N <= 1000) 
	// 구름 레벨에는 난이도 1부터 난이도 5까지 문제들을 제공하며,
	// (1 <= p_i < N; 1 <= i <= 5) 
	// 1 <= j <= 5인 j에 대하여
	// 난이도 j인 문제의 개수는 p_j 이상이다.
	// (1 <= k_i <= 5; 1 <= t_i <= 300) 
	int n, p[5], k, t, res = 0;
	vector<int> problem[5];

	// 첫째 줄에 구름이가 살펴본 문제 수 N이 주어진다.
	cin >> n;

	// 둘째 줄에 각 난이도별로 풀어야 하는 문제 수
	// p_1, p_2, p_3, p_4, p_5가 공백으로 구분되어 주어진다.
	for (int i = 0; i < 5; i++) {
		cin >> p[i];
	}

	// 셋째 줄부터 N개의 줄에 걸쳐 문제의 난이도 k_i와
	// 푸는 데 걸리는 시간 t_i가 공백으로 구분되어 주어진다.
	for (int i = 0; i < n; i++) {
		cin >> k >> t;

		problem[k - 1].push_back(t);
	}

	// 구름이는 난이도 1부터 난이도 5까지
	// 난이도가 같거나 증가하는 순서대로 문제를 풀 것이다.
	for (int i = 0; i < 5; i++) {
		// 계획한 문제를 푸는 데 필요한 최소 시간을 구하여 구름이가 취업에 성공할 수 있도록 도와주자.
		sort(problem[i].begin(), problem[i].end());
				
		for (int j = 0; j < p[i]; j++) {
			// 구름이는 문제들의 지문을 보고 살펴본 N개의 문제들을 푸는 데
			// 걸릴 예상 시간을 모두 체크해 보았다.
			res += problem[i][j];

			// 각 문제와 문제 사이에는 휴식 시간이 필요한데 
			// 이는 만약 두 문제가 같은 난이도라면
			// 두 문제를 푸는 데 걸리는 시간의 차이만큼 필요하고
			if (j > 0) {
				res += abs(problem[i][j] - problem[i][j - 1]);
			}
		}

		// 난이도를 증가시키는 경우 60분의 시간이 필요하다.
		res += 60;
	}

	// 즉, 구름이가 문제를 푸는 데 걸리는 시간은
	// 푼 문제의 예상 시간 합과 문제 사이 휴식 시간의 합만큼 걸린다.
	res -= 60;

	// 계획한 문제를 푸는 데 필요한 최소 시간을 출력하시오.
	cout << res;

	return 0;
}